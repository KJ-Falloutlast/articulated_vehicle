<launch>

  <arg name="x" default   = "-30.0" />
  <arg name="y" default   = "-25.0" />
  <arg name="z" default   = "0.15" />
  <arg name="yaw" default = "0.0" />

  <!-- Setup controllers -->
  <!-- rosparam file="$(find fetch_gazebo)/param/freight_controllers.yaml" command="load" / -->

  <!-- 1.URDF and TF support -->
  <param name="robot_description" textfile="$(find mrobot_description)/urdf/urobot.urdf" />
  <!--<param name="robot_description" textfile="$(find mrobot_description)/urdf/urobot_forrviz.urdf" />-->
  <!-- Put a robot in gazebo, make it look pretty -->

  <!-- 2.把机器人放在gazebo中 -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" 
        args="-urdf -x $(arg x) -y $(arg y) -z $(arg z) -Y $(arg yaw) -model xbot-u -param robot_description"/>

  <!--node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="use_gui" value="false"/>
  </node-->

  <!--3.Load the joint controllers to param server-->
  <rosparam file="$(find mrobot_description)/param/xbot-u_control.yaml" command="load"/>

  <!--4.Load controllers-->
  <node name="spawner" pkg="controller_manager" type="spawner" respawn="false"
    output="screen" ns="/xbot" args="joint_state_controller
	left_wheel_velocity_controller 
	left_behind_wheel_velocity_controller
	right_wheel_velocity_controller
	right_behind_wheel_velocity_controller
	articulate_controller
    "/>  <!--mobile_base_controller:左轮速度，左后轮速度，右轮速度，右后轮速度，铰接角速度-->


  <!-- 5.convert joint states to TF transforms for rviz, etc -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" ns="/xbot" respawn="false" output="screen">
    <param name="publish_frequency" type="double" value="100"/>
  </node>
  
  <!-- 6.启动关节控制节点 -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"/> 


  <!--7.启动左右轮转速的控制器-->
  <node name="wheel_velocity_transform" pkg="pid" type="transform_output" output="screen">
	  <remap from="right_wheel_v_front"  to="xbot/right_wheel_velocity_controller/command"/>
	  <remap from="right_wheel_v_behind" to="xbot/right_behind_wheel_velocity_controller/command"/>
	  <remap from="left_wheel_v_front"   to="xbot/left_wheel_velocity_controller/command"/>
	  <remap from="left_wheel_v_behind" to="xbot/left_behind_wheel_velocity_controller/command"/>
	  <remap from="articulate_v" to="xbot/articulate_controller/command"/>
  </node>
  <!-- right_wheel_v_front = xbot/right_wheel_velocity_controller/command，之后同理-->


  <!-- 8.To make the interface of simulation identical to real XBot -->
  <!-- <node pkg="nodelet" type="nodelet" name="mobile_base_nodelet_manager" args="manager"/>

  <node pkg="nodelet" type="nodelet" name="cmd_vel_mux"  args="load yocs_cmd_vel_mux/CmdVelMuxNodelet mobile_base_nodelet_manager">
    <param name="yaml_cfg_file" value="$(find mrobot_description)/param/mux.yaml"/>
    <remap from="cmd_vel_mux/output/cmd_vel" to="cmd_vel_for_control"/>
  </node> -->
  <!-- cmd_vel = cmd_vel_for_control -->

  <!--9.发布odom -->
  <node pkg="pid" type="odom_pub" name="odom_pub" output="log" />

  <!-- <node name="cmdvel2gazebo" pkg="mrobot_description" type="cmdvel2gazebo.py" respawn="true" output="screen"/> -->
  <!-- <node name="cmdvel2gazebo_new" pkg="xul307a_description" type="cmdvel2gazebo_new.py" respawn="true" output="screen"/> -->

  <!--publish odom，只有发布这个节点才能发布odom话题，否则不能发布odom话题，默认是关-->

</launch>
